
## this makefile automatically generated by lazy_make
## on Thu Jan 10  8:18:12 2019




TARGETS = move_sprite



#most people will install to /usr/local
#INSTALL_ROOT = /usr/local
#I use the HOME environment variable myself
INSTALL_ROOT = $(HOME)/bin

#   the local libs are directories you always want to inclue
#   the local libs are usually the same place you would install
LOCAL_LIBS = $(HOME)/usr

# Install directories


TARGET_BINS = $(INSTALL_TARGETS)
INSTALL_BIN_DIR = $(INSTALL_ROOT)/bin
UNINSTALL_BIN_TARGETS = $(addprefix $(INSTALL_BIN_DIR)/,$(TARGET_BINS))


####### Compiler, tools and options
      CC = cc
     CXX = c++ --std=c++11
    LINK = c++ --std=c++11
    MAKE = make
      RM = -rm -fv
      CP = -cp -v
     TAR = -tar -cp
   MKDIR = -mkdir -p
   RMDIR = -rmdir --ignore-fail-on-non-empty
      AR = -ar -r
      LN = -ln -sf


####### Configuration Options
	BASE_WARNING_FLAGS = -Wall -Wno-long-long 
#	XTRA_WARNING_FLAGS =  -Wno-long-long -pedantic -Wpointer-arith  -Wcast-align   -Wcast-qual -Winline


	BASE_OPTIMIZATION_FLAGS = -O3
#	XTRA_OPTIMIZATION_FLAGS = -ffast-math  -funroll-loops -fstrict-aliasing

#	BASE_PROFILE_FLAGS = -p 			#for prof
#	BASE_PROFILE_FLAGS = -pg 			#for gprof
#	XTRA_PROFILE_FLAGS = 

#	BASE_DEBUG_FLAGS = -g1 		#level 1 debug level (lowest)
#	BASE_DEBUG_FLAGS = -g  		#level 2 debug level (default)
#	BASE_DEBUG_FLAGS = -g2 		#level 3 debug level (highest)
#	BASE_DEBUG_FLAGS = -g -lefence 		#level 2 w/ electric fence
#	XTRA_DEBUG_FLAGS = 
	BASE_LIBS = -lm -lpthread
	XTRA_LIBS = -lSDL




####### Add your own extra flags and directories here

#this -march is from uname -m, check your compiler documentation for the right flags
#	XTRA_FLAGS += -march=x86_64

#	XTRA_FLAGS += -std=c++11

	XTRA_LIB_PATH = -L$(LOCAL_LIBS)/lib
	XTRA_INCLUDE_PATH = -I$(LOCAL_LIBS)/include




###############################################
####### NO USER SERVICEABLE PARTS BELOW THIS LINE
####### UNTIL THE DEPENDECY SECTION AT THE END OF THE FILE


# Combine variables
	WARNING_FLAGS = $(BASE_WARNING_FLAGS)  $(XTRA_WARNING_FLAGS)
	OPTIMIZATION_FLAGS = $(BASE_OPTIMIZATION_FLAGS)  $(XTRA_OPTIMIZATION_FLAGS)
	PROFILE_FLAGS = $(BASE_PROFILE_FLAGS)  $(XTRA_PROFILE_FLAGS)
	DEBUG_FLAGS = $(BASE_DEBUG_FLAGS)  $(XTRA_DEBUG_FLAGS)
	LIBS = $(BASE_LIBS) $(XTRA_LIBS)
	CFLAGS = $(OPTIMIZATION_FLAGS) $(WARNING_FLAGS) $(DEBUG_FLAGS) $(PROFILE_FLAGS) $(XTRA_FLAGS) 
CXXFLAGS = $(OPTIMIZATION_FLAGS) $(WARNING_FLAGS) $(DEBUG_FLAGS) $(PROFILE_FLAGS) $(XTRA_FLAGS) 
#	INCPATH = -I/usr/X11R6/include -I/usr/lib/gcc-lib -I/usr/include/g++
	INCPATH = $(XTRA_INCLUDE_PATH)
	LFLAGS = $(DEBUG_FLAGS) $(PROFILE_FLAGS)
	SO_FLAGS=-shared


####### Compile commands
	LINK_C=$(CC) $(LFLAGS) -o $@ $^ $(LIBS) $(XTRA_LIB_PATH)
	LINK_CXX=$(CXX) $(LFLAGS) -o $@ $^ $(LIBS) $(XTRA_LIB_PATH)
	LINK_CXX_SO=$(CXX) $(LFLAGS) -o $@ $^ $(LIBS) $(XTRA_LIB_PATH) $(SO_FLAGS)
	LINK_LIBRARY=$(AR) $@ $^


####### Implicit rules


.SUFFIXES: .cpp .cxx .cc .C .c

.o.so:
	$(LINK_CXX_SO)

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<


####### Build rules

default: $(TARGETS)



####### Target definitions

all: $(TARGETS)


.PHONY: clean deps uninstall

clean:
	@$(RM) -f *.[oO]
	@$(RM) -f *~
	@$(RM) -f core
	@$(RM) -f core.*
	@$(RM) $(TARGETS)

dep:
	@$(CXX) -MM *.cc *.cpp $(INCPATH) > makefile.deps

dep: deps

install: $(TARGETS)
	@$(CP) $(TARGET_BINS) $(INSTALL_BIN_DIR) 

uninstall:
	@$(RM) $(UNINSTALL_TARGET_BINS)


####### Dependencies

move_sprite: main_move_sprite.o
	$(LINK_CXX)

include makefile.deps



